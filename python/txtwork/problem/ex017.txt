// 새로운 타입의 파생 II

// Employee 클래스는 이름, 부서, 성별, 나이 필드를 갖습니다. 이 떄 성별은 Male, Female 중 하나를 선택할 수 있는 열거형을 사용합니다.
// 생성자는 필드에 대한 초기화를 담당하고, 필드 정보를 출력하는 display 메서드를 가지며, 메서드 whoAmI는 "직원입니다."를 출력합니다.
// Salesman은 Employee 클래스를 상속받으며 오버라이딩된 메서드 whoAmI는 "영업직원입니다."를 출력합니다.  
// 위 사항을 만족하고 아래 결과를 출력하는 프로그램을 작성하십시오. 

//성명:홍길동
//성별:Male
//나이:20
//부서:영업부
//영업직원입니다.


public class Main{
	
	public static void main(String[] args) {
        
		Salesman s1 = new Salesman("홍길동", "영업부", Gender.Male, 20);

        s1.display();
        s1.whoAmI();
        
	}

}

enum Gender
{ 
	Male, Female
}

class Employee
{
    String name, dept;
    Gender sex;
    int age;

    public Employee(String inName, String inDept, Gender inSex, int inAge)
    {
        name = inName;
        dept = inDept;
        sex = inSex;
        age = inAge;
    }

    public void display()    
    {
        System.out.printf("성명: %s\n", name);
        System.out.printf("성별: %s\n", sex);
        System.out.printf("나이: %d\n", age);
        System.out.printf("부서: %s\n", dept);
    }

    public  void whoAmI() 
    {
        System.out.println("직원입니다.");
    }
}

class Salesman extends Employee
{
    public Salesman(String inName, String inDept, Gender inSex, int inAge)
    {
    	super(inName, inDept, inSex, inAge);
    }

    @Override
    public void whoAmI()   
    {
        System.out.println("영업직원입니다.");
    }
}


